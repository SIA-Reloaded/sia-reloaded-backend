# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  suia-stack

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  # Evaluacion Docente Lambdas

  getUserData:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/system/get-user-data.getByUserDataHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: pulls all the userdata from dynamoDB.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: UserData
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: UserData
      Events:
        Api:
          Type: Api
          Properties:
            Path: /system/getUserData/{username}
            Method: GET

  getRates:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/teachers/get-rates.getRatesHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Gets one teacher evaluation with a HTTP get method from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: TeacherRate
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: TeacherRate
      Events:
        Api:
          Type: Api
          Properties:
            Path: /teachers/getRates
            Method: GET
  getCourses:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/teachers/get-courses.getCoursesHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Gets one teacher evaluation with a HTTP get method from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: CourseGroup
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: CourseGroup
      Events:
        Api:
          Type: Api
          Properties:
            Path: /teachers/getCourses
            Method: GET

  getCourse:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/teachers/get-course.getCourseHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Gets one teacher evaluation with a HTTP get method from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: CourseGroup
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: CourseGroup
      Events:
        Api:
          Type: Api
          Properties:
            Path: /teachers/getCourse
            Method: GET 

  # Fin Evaluacion Docente Lambdas

  # ------------------ Calendar events --------------------------------
  createCalendarEvent:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/system/calendar/create-calendar-event.createCalendarEventHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Creates a calendar event
      #Environment:
      #  Variables:
      Events:
        Api:
          Type: Api
          Properties:
            Path: /system/createCalendarEvent
            Method: GET

  updateCalendarEventHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/system/calendar/update-event.updateCalendarEventHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Creates a calendar event
      #Environment:
      #  Variables:
      Events:
        Api:
          Type: Api
          Properties:
            Path: /system/updateCalendarEventHandler
            Method: GET 

# ------------------ Courses functions --------------------------------

    createCourse:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/admins/create-course.createCourse
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref Courses
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TableName: !Ref Courses
      Events:
        Api:
          Type: Api
          Properties:
            Path: /system/createCourse
            Method: POST

Outputs:

  getUserDataApi:
    Description: "API Gateway endpoint URL for Prod stage for getUserData function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/system/getUserData"
  getUserData:
    Description: "getUserData Lambda Function ARN"
    Value: !GetAtt getUserData.Arn
  getUserDataFunctionIamRole:
    Description: "Implicit IAM Role created for getUserData function"
    Value: !GetAtt getUserData.Arn
  
  getRatesApi:
    Description: "API Gateway endpoint URL for Prod stage for getRates function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/teachers/getRates"
  getRates:
    Description: "getRates Lambda Function ARN"
    Value: !GetAtt getRates.Arn
  getRatesFunctionIamRole:
    Description: "Implicit IAM Role created for getRates function"
    Value: !GetAtt getRates.Arn
  
  getCoursesApi:
    Description: "API Gateway endpoint URL for Prod stage for getCourses function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/teachers/getCourses"
  getCourses:
    Description: "getCourses Lambda Function ARN"
    Value: !GetAtt getCourses.Arn
  getCoursesFunctionIamRole:
    Description: "Implicit IAM Role created for getCourses function"
    Value: !GetAtt getCourses.Arn

  getCourseApi:
    Description: "API Gateway endpoint URL for Prod stage for getCourse function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/teachers/getCourse"
  getCourse:
    Description: "getCourse Lambda Function ARN"
    Value: !GetAtt getCourse.Arn
  getCourseFunctionIamRole:
    Description: "Implicit IAM Role created for getCourse function"
    Value: !GetAtt getCourse.Arn 

  updateCalendarEventHandlerApi:
    Description: "API Gateway endpoint URL for Prod stage for updateCalendarEventHandler function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/system/updateCalendarEventHandler"
  updateCalendarEventHandler:
    Description: "getCourse Lambda Function ARN"
    Value: !GetAtt updateCalendarEventHandler.Arn
  getupdateCalendarEventHandlerFunctionIamRole:
    Description: "Implicit IAM Role created for updateCalendarEventHandler function"
    Value: !GetAtt updateCalendarEventHandler.Arn 

  createCourseHandlerApi:
    Description: "API Gateway endpoint URL for Prod stage for createCourseHandlerHandler function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/system/createCourse"
  createCourseHandler:
    Description: "getCourse Lambda Function ARN"
    Value: !GetAtt createCourseHandler.Arn
  postCreateCourseFunctionIamRole:
    Description: "Implicit IAM Role created for createCourseHandler function"
    Value: !GetAtt createCourseHandler.Arn 