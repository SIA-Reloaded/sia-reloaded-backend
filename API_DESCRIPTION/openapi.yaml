swagger: '2.0'
info:
  title: SUIA API definition
  description: Sistema Unificado de Información Académica API.
  contact:
    email: aldiazve@unal.edu.co
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.2
servers:
- url: /v2
tags:
- name: System
  description: Global system microservices.
- name: Students
  description: Students related microservices.
- name: Teachers
  description: Teachers related microservices.
- name: Admins
  description: Managers related microservices.
paths:
  /system/getUserData:
    get:
      tags:
      - System
      summary: Get all the data from a user
      operationId: getUserData
      parameters:
      - name: userID
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: user data retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserData'
        403:
          description: User not authorized.
          content:
            application/json:
              schema:
                title: Forbiden
                type: string
        404:
          description: Not found
          content:
            application/json:
              schema:
                title: User not found.
                type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                title: InternalServerError
                type: string
  
  /students/getStudentData:
    get:
      tags:
      - Students
      summary: Gets the specific data of a Student
      operationId: getStudentData
      parameters:
      - name: studentID
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: data retrieved.
          content:
            application/json:
              schema:
                type: array
                items: {
                  $ref: '#/components/schemas/StudentData'
                }
        403:
          description: User not authorized.
          content:
            application/json:
              schema:
                title: Forbiden
                type: string
        404:
          description: User not valid, this happens if the user does not exists.
          content:
            application/json:
              schema:
                title: User not found.
                type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                title: InternalServerError
                type: string

  /teachers/getCourses:
    get:
      tags:
      - Teachers
      summary: Gets the list of courses assigned to a given teacher id durent a a given semester semester.
      operationId: getTeacherCourses
      parameters:
      - name: teacherID
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: Courses retrieved.
          content:
            application/json:
              schema:
                type: array
                items: {
                  $ref: '#/components/schemas/CourseGroup'
                }
        403:
          description: User not authorized.
          content:
            application/json:
              schema:
                title: Forbiden
                type: string
        404:
          description: User not valid, this happens if the user does not exists.
          content:
            application/json:
              schema:
                title: User not found.
                type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                title: InternalServerError
                type: string
  /teachers/getTeacherData:
    get:
      tags:
      - Teachers
      summary: Gets the specific data of a teacher
      operationId: getTeacherData
      parameters:
      - name: teacherID
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: data retrieved.
          content:
            application/json:
              schema:
                type: array
                items: {
                  $ref: '#/components/schemas/ProfessorData'
                }
        403:
          description: User not authorized.
          content:
            application/json:
              schema:
                title: Forbiden
                type: string
        404:
          description: User not valid, this happens if the user does not exists.
          content:
            application/json:
              schema:
                title: User not found.
                type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                title: InternalServerError
                type: string
  /teachers/getRates:
    get:
      tags:
      - Teachers
      summary: Gets the list of rates given to a professor. if semester isn't provide, return the rates of last semester.
      operationId: getRates
      parameters:
      - name: teacherID
        in: query
        required: true
        schema:
          type: string
      - name: semester
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: Rates retrieved.
          content:
            application/json:
              schema:
                type: array
                items: {
                  $ref: '#/components/schemas/TeacherRate'
                }
        403:
          description: User not authorized.
          content:
            application/json:
              schema:
                title: Forbiden
                type: string
        404:
          description: Not Found
          content:
            application/json:
              schema:
                title: User not found.
                type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                title: InternalServerError
                type: string

  /admin/courseGroups:
    post:
      tags:
      - Admins
      summary: creates a group with the given data.
      description: creates a group with the given data.
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseGroup'
        required: true
      responses:
        200:
          description: group capacity updated succesfully.
          content:
            application/json:
              schema:
                title: Done message
                type: string
        400:
          description: Bad query, body not invalid.
          content:
            application/json:
              schema:
                title: Badquery
                type: string
        403:
          description: Whoever is making this request is not autenticated.
          content:
            application/json:
              schema:
                title: Forbiden
                type: string
        404:
          description: group not valid, this happens if the group does not exists.
          content:
            application/json:
              schema:
                title: group not found.
                type: string
        500:
          description: Server Error.
          content:
            application/json:
              schema:
                title: InternalServerError
                type: string
      x-codegen-request-body-name: body
    put:
      tags:
      - Admins
      summary: updatesa group with the given data.
      description: updatesa group with the given data.
      operationId: updateGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseGroup'
        required: true
      responses:
        200:
          description: group capacity updated succesfully.
          content:
            application/json:
              schema:
                title: Done message
                type: string
        400:
          description: Bad query, body not invalid.
          content:
            application/json:
              schema:
                title: Badquery
                type: string
        403:
          description: Whoever is making this request is not autenticated.
          content:
            application/json:
              schema:
                title: Forbiden
                type: string
        404:
          description: group not valid, this happens if the group does not exists.
          content:
            application/json:
              schema:
                title: group not found.
                type: string
        500:
          description: Server Error.
          content:
            application/json:
              schema:
                title: InternalServerError
                type: string
      x-codegen-request-body-name: body
    delete:
      tags:
      - Admins
      summary: deteles a group with the given data.
      description: deletes a group with the given data.
      operationId: deleteGroup
      parameters:
      - name: groupID
        in: query
        required: true
        schema:
          type: string
      
      responses:
        200:
          description: group capacity updated succesfully.
          content:
            application/json:
              schema:
                title: Done message
                type: string
        400:
          description: Bad query, body not invalid.
          content:
            application/json:
              schema:
                title: Badquery
                type: string
        403:
          description: Whoever is making this request is not autenticated.
          content:
            application/json:
              schema:
                title: Forbiden
                type: string
        404:
          description: group not valid, this happens if the group does not exists.
          content:
            application/json:
              schema:
                title: group not found.
                type: string
        500:
          description: Server Error.
          content:
            application/json:
              schema:
                title: InternalServerError
                type: string
      x-codegen-request-body-name: body
  /admin/getCourses:
    get:
      tags:
      - Admins
      summary: Retieve all courses on db
      operationId: getAllCourses
      responses:
        200:
          description: Courses retrieved.
          content:
            application/json:
              schema:
                type: array
                items: {
                  $ref: '#/components/schemas/Course'
                }
        403:
          description: User not authorized.
          content:
            application/json:
              schema:
                title: Forbiden
                type: string
        404:
          description: User not valid, this happens if the user does not exists.
          content:
            application/json:
              schema:
                title: User not found.
                type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                title: InternalServerError
                type: string
  /admin/getCoursesGroup:
    get:
      tags:
      - Admins
      summary: Retieve all courses on db
      operationId: getCourseGroup
      parameters:
      - name: courseCode
        in: query
        required: false
        schema:
          type: string
      - name: groupID
        in: query
        required: false
        schema:
          type: string
      responses:
        200:
          description: Courses retrieved.
          content:
            application/json:
              schema:
                type: array
                items: {
                  $ref: '#/components/schemas/CourseGroup'
                }
        403:
          description: User not authorized.
          content:
            application/json:
              schema:
                title: Forbiden
                type: string
        404:
          description: User not valid, this happens if the user does not exists.
          content:
            application/json:
              schema:
                title: User not found.
                type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                title: InternalServerError
                type: string
  
  
  /admin/enrollStudent:
    post:
      tags:
      - Admins
      summary: Enroll a student on a given group
      description: Enroll a student on a given group
      operationId: enrollStudent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnrollStudentPayload'
        required: true
      responses:
        200:
          description: the student was enroll succesfully.
          content:
            application/json:
              schema:
                title: Done message
                type: string
        400:
          description: Bad query, body not invalid.
          content:
            application/json:
              schema:
                title: Badquery
                type: string
        403:
          description: Whoever is making this request is not autenticated.
          content:
            application/json:
              schema:
                title: Forbiden
                type: string
        404:
          description: group not valid, this happens if the group does not exists.
          content:
            application/json:
              schema:
                title: group not found.
                type: string
        500:
          description: Server Error.
          content:
            application/json:
              schema:
                title: InternalServerError
                type: string
      x-codegen-request-body-name: body

components:
  schemas:
    UserData:  # Este objeto es representa una tabla
      type: object
      properties:
        id:   # Llave principal
          type: string
        username: # llave 2
          type: string
        basicData:
          $ref: '#/components/schemas/BasicUserData'
        birthData:
          $ref: '#/components/schemas/BirthUserData'
        healthData:
          $ref: '#/components/schemas/HealthUserData'
        accountants:
          type: array
          items: {
            $ref: '#/components/schemas/UserAccountant'
          }
        originData:
          $ref: '#/components/schemas/OriginData'
        residenceData:
          $ref: '#/components/schemas/ResidenceData'
        militarData:
          $ref: '#/components/schemas/MilitarData'
        roles:
          type: array
          items: {
            $ref: '#/components/schemas/UserRoles'
          }
    BasicUserData:
      type: object
      properties:
        personalId:
          type: string
        idType:
          type: string
        email:
          type: string
        personaEmail:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        sex:
          type: string
        ethnicity:
          type: string
        phone:
          type: number
        celphone:
          type: number
    BirthUserData:
      type: object
      properties:
        birthdate:
          type: string
          format: date
        birthplace:
          type: object
          properties:
            country:
              type: string
            municipality:
              type: string
            city:
              type: string
        nacionality:
          type: string
    HealthUserData:
      type: object
      properties:
        bloodtype:
            type: string
        RH:
          type: string
        EPS:
          type: string
    UserAccountant:
      type: object
      properties: 
        firstName:
            type: string
        lastName:
          type: string
        personalId:
          type: string
        idType:
          type: string
    OriginData:
      type: object
      properties:
        country:
          type: string
        municipality:
          type: string
        city:
          type: string
        address:
          type: string
        phone: 
          type: number
        socioeconomicLevel:
          type: number
    ResidenceData:
      type: object
      properties:
        country:
          type: string
        municipality:
          type: string
        city:
          type: string
        address:
          type: string
        phone: 
          type: number
    MilitarData:
      type: object
      properties:
        cardID:
          type: string
        militarDistric:
          type: string
        cardClass:
          type: string
        militarStatus:
          type: string
    ProfessorData: # Este objeto es representa una tabla
      type: object
      properties:
        id: 
          type: string
        campus:
          $ref: '#/components/schemas/Campuses'
        faculty:
          type: string
        department:
          type: string
    ProfessorCourse:
      type: object
      properties:
        groupID:
          type: string
        grades: 
          type: array
          items: {
            $ref: '#/components/schemas/ProfessorGrades'
          }
    ProfessorGrades:
      type: object
      properties:
        studentID:
          type: string
        final: 
          type: number
        partials:
          type: array
          items: {
            type: object
          }
    ProfessorAcademicHistory: 
      type: object
      properties:
        career:
          type: string
        curriculum:
          type: string
        semesters: 
          type: array
          items: {
            type: string
          }
    TeacherRate: # Este objeto es representa una tabla
      type: object
      properties:
        id:
          type: string
        teacherID: 
          type: string
        courseID:
          type: string
        academicCalendar:
          type: string
        questions:
          type: array
          items: {
            $ref: '#/components/schemas/RateQuestion'
          }
        answers:
          type: array
          items: {
            $ref: '#/components/schemas/RateAnswer'
          }
    RateQuestionOption:
      type: object
      properties:
        label:
          type: string
        value:
          type: number
    RateQuestion:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        questionType: 
          type: string
        options: 
          type: array
          items: {
            $ref: '#/components/schemas/RateQuestionOption'            
          }
    RateAnswer:
      type: object
      properties:
        questionID: 
          type: string
        questionType:  # Contenido de la respuesta en caso de que sea pregunta abierta
          type: string
        value: # Puntanje en caso de que sea pregunta de puntaje
          type: number
    StudentData: # Este objeto es representa una tabla
      type: object
      properties:
        rol: 
          $ref: '#/components/schemas/StudentRoles'
        academicHistory:
          $ref: '#/components/schemas/StudentAcademicHistory'
    StudentAcademicHistory: 
      type: object
      properties:
        career:
          type: string
        curriculum:
          type: string
        PAPA:
          type: string
        PAPPI:
          type: string
    Semester: # Este objeto es representa una tabla
      type: object
      properties:
        id:
          type: string
        academicHistoryID:
          type: string
        userID:
          type: string
        name:  # 2020-1
          type: string
        grades: # only Students
          type: array
          items: {
            $ref: '#/components/schemas/StudentGrades'
          }
        courses: # Only professors
          type: array
          items: {
            $ref: '#/components/schemas/ProfessorCourse'
          }
    StudentGrades:
      type: object
      properties:
        groupID:
          type: string
        final: 
          type: number
        partials:
          type: array
          items: {
            type: object
          }
    Course:
      type: object
      properties:
        id: 
          type: string
        name: 
          type: string
        code: 
          type: string
    CourseGroup: # Este objeto es representa una tabla
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        capacity:
          type: number
        capacityDistribution:
          $ref: '#/components/schemas/GroupCapacityDistribution'
        schedule:
          $ref: '#/components/schemas/GroupSchedule'
        calendarEventsId: 
          type: object
        meetLink:
          type: string
        group: 
          type: number
        classroom:
          type: object
          properties:
            campus:
              $ref: '#/components/schemas/Campuses'
            building: 
              type: string
            classroomNumber:
              type: string
        students:
          type: array
          items: {
            $ref: '#/components/schemas/StudentGroupRepresentation'
          } 
        teacherID: 
          type: string
    StudentGroupRepresentation: 
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    EnrollStudentPayload:
      type: object
      properties:
        studentID: 
          type: string
        groupID: 
          type: string
    GroupCapacityDistribution:
      type: object
      properties:
        disciplinaryObligatory:
          type: number
        disciplinaryOptional:
          type: number
        fundamentation:
          type: number
        freeElection:
          type: number
    GroupSchedule:
      type: array
      items: {
        $ref: '#/components/schemas/ClassSchedule'
      }
    ClassSchedule:
      type: object
      properties:
        day:
          type: string
        startHours:
          type: string
        endHours: 
          type: string
    UserRoles:
      type: string
      enum:
      - ADMIN
      - TEACHER
      - STUDENT
    AcademicCalendar: 
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        campus:
          $ref: '#/components/schemas/Campuses'
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        active: 
          type: boolean
    CalendarEvent:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        calendar_id:
          type: string
    StudentRoles:
      type: string
      enum:
      - UNDERGRADUATE
      - MASTERS
      - PHD
      - GRADUATED
    Campuses:
      type: string
      enum:
      - BOGOTA
      - MEDELLIN
      - MANIZALES
      - PALMIRA
      - AMAZONIA
      - ORINOQUIA
      - TUMACO
      - CARIBE
      - LA_PAZ
