# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  suia-stack

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  # Evaluacion Docente Lambdas

  getUserData:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/system/get-user-data.getByUserDataHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: pulls all the userdata from dynamoDB.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref Users
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref Users
      Events:
        Api:
          Type: Api
          Properties:
            Path: /system/getUserData/{username}
            Method: GET

  getRates:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/teachers/get-rates.getRatesHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Gets one teacher evaluation with a HTTP get method from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TeacherRate
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref TeacherRate
      Events:
        Api:
          Type: Api
          Properties:
            Path: /teachers/getRates
            Method: GET

  getCourses:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/teachers/get-courses.getCoursesHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Gets one teacher evaluation with a HTTP get method from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CourseGroups
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref CourseGroups
      Events:
        Api:
          Type: Api
          Properties:
            Path: /teachers/getCourses
            Method: GET

  getCourse:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/teachers/get-course.getCourseHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Gets one teacher evaluation with a HTTP get method from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CourseGroups
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref CourseGroups
      Events:
        Api:
          Type: Api
          Properties:
            Path: /teachers/getCourse
            Method: GET 
    
  getQuestions:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/teachers/get-questions.getQuestionsHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Gets the questions for evaluacion docente a HTTP get method from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref RateQuestion
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref RateQuestion
      Events:
        Api:
          Type: Api
          Properties:
            Path: /teachers/getQuestions
            Method: GET 

  putTeacherRate:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/teachers/put-teacherRate.putTeacherRateHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Put the rate for a teacher using HTTP post method to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: TeacherRate
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: TeacherRate
      Events:
        Api:
          Type: Api
          Properties:
            Path: /teachers/putTeacherRate
            Method: POST 

  # Fin Evaluacion Docente Lambdas

  # ------------------ Calendar events --------------------------------
  createCalendarEvent:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/system/calendar/create-calendar-event.createCalendarEventHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Creates a calendar event
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CourseGroups
        - DynamoDBStreamReadPolicy:
            TableName: !Ref CourseGroups
            StreamName: !GetAtt CourseGroups.StreamArn
      #Environment:
      #  Variables:
      Events:
        DDBEvent: 
          Type: DynamoDB
          Properties:
            Stream: 
              !GetAtt CourseGroups.StreamArn   
            StartingPosition: TRIM_HORIZON

  updateCalendarEventHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/system/calendar/update-event.updateCalendarEventHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Creates a calendar event
      #Environment:
      #  Variables:
      Events:
        Api:
          Type: Api
          Properties:
            Path: /system/updateCalendarEventHandler
            Method: GET 

# ------------------ Courses functions --------------------------------

  createCourse:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/admins/create-course.courseGroups
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref Courses
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref Courses
      Events:
        Api:
          Type: Api
          Properties:
            Path: /admin/createCourse
            Method: POST

  createCourseGroup:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/admins/create-course-group.createCourseGroup
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CourseGroups
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref CourseGroups
      Events:
        Api:
          Type: Api
          Properties:
            Path: /admin/createCourseGroup
            Method: POST

  getAllCourses:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/admins/get-courses.getCourses
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Gets the questions for evaluacion docente a HTTP get method from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref Courses
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref Courses
      Events:
        Api:
          Type: Api
          Properties:
            Path: /admin/getCourses
            Method: GET
    
  getCourseGroups:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/admins/get-course-groups.getCourseGroups
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: Gets the questions for evaluacion docente a HTTP get method from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref Courses
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref Courses
      Events:
        Api:
          Type: Api
          Properties:
            Path: /admin/getCourseGroups
            Method: GET

#--------------------------------- Users

  createUser:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/system/create-user.createUser
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref Users
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE: !Ref Users
      Events:
        Api:
          Type: Api
          Properties:
            Path: /system/createUser
            Method: POST


#--------------------------------- Tablas

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  Administratives:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  
  Courses:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  
  CourseGroups:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  
  Professors:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  RateQuestion:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  Students:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  TeacherRate:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  Users:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  


Outputs:

  getUserDataApi:
    Description: "API Gateway endpoint URL for Prod stage for getUserData function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/system/getUserData/{username}"
  getUserData:
    Description: "getUserData Lambda Function ARN"
    Value: !GetAtt getUserData.Arn
  getUserDataFunctionIamRole:
    Description: "Implicit IAM Role created for getUserData function"
    Value: !GetAtt getUserDataRole.Arn
  
  getRatesApi:
    Description: "API Gateway endpoint URL for Prod stage for getRates function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/teachers/getRates"
  getRates:
    Description: "getRates Lambda Function ARN"
    Value: !GetAtt getRates.Arn
  getRatesFunctionIamRole:
    Description: "Implicit IAM Role created for getRates function"
    Value: !GetAtt getRatesRole.Arn
  
  getCoursesApi:
    Description: "API Gateway endpoint URL for Prod stage for getCourses function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/teachers/getCourses"
  getCourses:
    Description: "getCourses Lambda Function ARN"
    Value: !GetAtt getCourses.Arn
  getCoursesFunctionIamRole:
    Description: "Implicit IAM Role created for getCourses function"
    Value: !GetAtt getCoursesRole.Arn

  getQuestionsApi:
    Description: "API Gateway endpoint URL for Prod stage for getQuestions function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/teachers/getQuestions"
  getQuestions:
    Description: "getQuestions Lambda Function ARN"
    Value: !GetAtt getQuestions.Arn
  getQuestionsFunctionIamRole:
    Description: "Implicit IAM Role created for getQuestions function"
    Value: !GetAtt getQuestionsRole.Arn

  putTeacherRateApi:
    Description: "API Gateway endpoint URL for Prod stage for putTeacherRate function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/teachers/putTeacherRate"
  putTeacherRate:
    Description: "putTeacherRate Lambda Function ARN"
    Value: !GetAtt putTeacherRate.Arn
  putTeacherRateFunctionIamRole:
    Description: "Implicit IAM Role created for putTeacherRate function"
    Value: !GetAtt putTeacherRate.Arn

  updateCalendarEventHandlerApi:
    Description: "API Gateway endpoint URL for Prod stage for updateCalendarEventHandler function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/system/updateCalendarEventHandler"
  updateCalendarEventHandler:
    Description: "getCourse Lambda Function ARN"
    Value: !GetAtt updateCalendarEventHandler.Arn
  updateCalendarEventHandlerFunctionIamRole:
    Description: "Implicit IAM Role created for updateCalendarEventHandler function"
    Value: !GetAtt updateCalendarEventHandlerRole.Arn 

  createCourseHandlerApi:
    Description: "API Gateway endpoint URL for Prod stage for createCourseHandlerHandler function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/admin/createCourse"
  createCourseHandler:
    Description: "getCourse Lambda Function ARN"
    Value: !GetAtt createCourse.Arn
  createCourseFunctionIamRole:
    Description: "Implicit IAM Role created for createCourseHandler function"
    Value: !GetAtt createCourseRole.Arn 

  createCourseGroupHandlerApi:
    Description: "API Gateway endpoint URL for Prod stage for createCourseGroupHandlerHandler function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/admin/createCourseGroup"
  createCourseGroupHandler:
    Description: "getCourse Lambda Function ARN"
    Value: !GetAtt createCourseGroup.Arn
  createCourseGroupFunctionIamRole:
    Description: "Implicit IAM Role created for createCourseGroupHandler function"
    Value: !GetAtt createCourseGroupRole.Arn 

  getCourseGroupsApi:
    Description: "API Gateway endpoint URL for Prod stage for getCourseGroups function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/admin/getCourseGroups"
  getCourseGroups:
    Description: "getCourseGroups Lambda Function ARN"
    Value: !GetAtt getCourseGroups.Arn
  getCourseGroupsFunctionIamRole:
    Description: "Implicit IAM Role created for getCourseGroups function"
    Value: !GetAtt getCourseGroupsRole.Arn
  
  createUserApi:
    Description: "API Gateway endpoint URL for Prod stage for createUser function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/system/createUser"
  createUser:
    Description: "createUser Lambda Function ARN"
    Value: !GetAtt createUser.Arn
  createUserFunctionIamRole:
    Description: "Implicit IAM Role created for createUser function"
    Value: !GetAtt createUserRole.Arn
